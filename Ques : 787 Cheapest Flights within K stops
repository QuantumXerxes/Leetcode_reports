Ques : 787 
Cheapest Flights within K stops 
Problem Statement : Given us is a graph , we have to check and return the value of cost incurred while moving from source to destination while being limited by the maximum no of stops we can move from in path excluding the source and destination.
Observation :

Have a look at this graph : 
   0
  / \
 v   v
1  --> 2
|     |
v     |
3 <---

Source	Destination	Weight
0	1	         100
2	0	         100
1	3	         600
2	3	         200
1 2          100

given : n=4 , k=1 , src=0 , dst=3

So movement through graph can be intutitively thought of through patterns such as :
1) Graph Ques : need of 2-D matrix or an ArrayList(preferred in this solution).
2)Shortest Path to destination: Dijktra's Algorithm
3)K Stops at Max : The only factor for shortest path isn't edge weight (cost) but number of stops too.

Djiktra's Algorithm makes use of running bfs and PriorityQueue:
Dry Running our Intution as of now :
Queue in each iteration  
Queue stores => Truple =>( node , cost to reach that node from a specific path , stops met while reaching that node) 
i) (0,0,0)           
ii) (1,100,1)
iii)(2,200,2),(3,700,2)
stops in iii) for Truple =2
~But now the stops > 1 of the Elements in the Queue hence those nodes shouldn't be processed anyhow . 
~A cost array will be made to store the cost to reach that node while being limited by the no of stops and the minimum cost too using Djiktra's Algo's rule
cost till now + cost to reach that node < cost already present as it's cost in cost array
update the cost to reach that node in cost array to cost till now + cost to reach that node
~Priority Queue must sort elements inside on the basis of first priority to be the stops and then 2nd priority as cost if the stops are same of elements in queue.
Observed as in the above graph there could've been two paths to dest=3 from src=0
0->1->2->3 cost = 400 stops =2 
0->1->3   cost=700 stops=1 
we choose the cost of 700 and second path which shows that min stops are preferred over min cost.

Approach :

This Java code is an implementation of the Dijkstra's algorithm modified to find the cheapest price from a source node to a destination node within a limited number of stops (or hops) k. Here’s a breakdown of the approach and steps:

Approach:
1) Graph Representation:
The graph is represented using an adjacency list where each node (Edge) maintains a list of edges (Edge) it is connected to along with the weight of each edge.

2) Priority Queue (pq):
A PriorityQueue (pq) of Truple objects is used to facilitate the Dijkstra's algorithm.
Each Truple contains:
node: The current node in consideration.
cost: The cumulative cost to reach this node from the source.
stop: The number of stops (or hops) taken to reach this node.

3)Initialization:
Initialize an array dist to store the minimum cost to reach each node from the source. Initialize all values to Integer.MAX_VALUE except for the source node src, which is set to 0 indicating no cost to reach itself.
Start the pq with the source node and cost 0 and stop as 0.


4)Dijkstra's Algorithm:
Pop nodes from pq until it's empty. 
For each node:
~Retrieve the current node (currnode)
~current cost (currcost)
~current number of stops (currstop).
If currstop exceeds k, skip further processing for this node since we can't exceed k stops.
Iterate through all edges (Edge) connected to currnode.
For each edge, calculate the nextcost as the sum of currcost and the edge's weight.
If nextcost is less than the current known distance to the destination node (e.dest), update dist[e.dest] to nextcost and push a new Truple into pq with e.dest, nextcost, and currstop + 1.

Result:
After processing all nodes reachable within k stops from the source, check the value of dist[dst].
If dist[dst] remains Integer.MAX_VALUE, return -1 indicating that the destination node dst is not reachable within k stops.
Otherwise, return dist[dst], which contains the minimum cost to reach dst from src within k stops.



Code :
class Solution 
{
    static class Edge{
        int src;
        int dest;
        int weight;

        Edge(int s,int d,int w)
        {
           this.src=s;
           this.dest=d;
           this.weight=w;
        }
    }


    static class Truple implements Comparable<Truple> {
        int node;
        int cost; 
        int stop; 

        Truple(int s, int c, int stop) {
            this.node = s;
            this.cost = c;
            this.stop = stop;
        }

        @Override
        public int compareTo(Truple o) {
            if (this.stop != o.stop) {
                return this.stop - o.stop; 
            } else {
                return this.cost - o.cost; 
            }
        }
    }


    public static int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        ArrayList<Edge>[] graph = new ArrayList[n];

        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] flight : flights) {
            int u = flight[0];
            int v = flight[1];
            int w = flight[2];
            graph[u].add(new Edge(u, v, w));
        }
        int[] cost = new int[n];
        
        for (int i = 0; i < n; i++) {
            cost[i] = Integer.MAX_VALUE;
           
        }
         cost[src] = 0;
        
        PriorityQueue<Truple> pq = new PriorityQueue<>();
        pq.add(new Truple(src, 0, 0));
        while (!pq.isEmpty()) {
            Truple curr = pq.remove();
            int currnode = curr.node;
            int currcost = curr.cost;
            int currstop = curr.stop;
            if (currstop<=k) {

                for (int i = 0; i < graph[currnode].size(); i++) {
                    Edge e = graph[currnode].get(i);
                    int nextcost = currcost + e.weight;

                    if (nextcost < cost[e.dest]) {
                        cost[e.dest] = nextcost;
                        pq.add(new Truple(e.dest, nextcost, currstop + 1));
                    }
                   
                }

            }
        }


        return cost[dst]==Integer.MAX_VALUE ? -1:cost[dst];
    }

    
}

Time Complexity: O((n+m)logn), where 𝑛 is the number of nodes and 𝑚 is the number of edges in the graph.
Space Complexity: O(n+m), primarily due to the storage of the graph using an adjacency list and the auxiliary data structures used in Dijkstra's algorithm.
