Ques:826
Most Profit Assigning Work
Problem Statement : Provided arrays of difficulty,profits and worker.The difficulty array contains the difficulty level of the ith job and corresponding to the ith profit that job can make , We have to find the maximum profit a worker can make based upon his ability .
Ability of the worker at ith position let it be called x gives us a range from [min difficulty - x difficulty] in difficulty array corresponding to it's maximum profit within range in it's array.

Observation :
difficulty = [68,35,52,47,86] , profit = [67,17,1,81,3] , worker = [92,10,85,84,82]

We have to find the max profit of that worker's ability from difficulty array but for that we will have to check of where the maximum profit occurs corresponding to difficulty and check from min difficulty to worker's difficulty 
>> The min to worker's ability is to be used in difficulty array which suggests sorting and as the difficulty indices correspond to the profit indices too hence we have to sort through a combination of both .(2D Array)

>>To keep a check on maxprofit incurred so far the worker's ability array must be sorted too as if the maxprofit of worker[i] is x then the worker[i+1] will have a maxprofit of either >=x because the worker[i+1]>worker[i] .

Dry Run our observation :
>> 2D array[i][difficulty] and 2D array[i][profit]
       0  |  1                                                                                0 | 1
 0 |  68  | 67                                                                           0 | 35 | 17
 1 |  35  | 17                                                                           1 | 47 | 81
 2 |  52  | 1                                                                            2 | 52 | 1
 3 |  47  | 81                                                                           3 | 68 | 67
 4 |  86  | 3   ___________________ After sorting on basis of difficulty _______________ 4 | 86 | 3

Worker array : 10 , 82 , 84 , 85 , 92
1) The 10 at worker[0] is not the minimum difficulty level in there 2D matrix hence profit =0.
2) The 82 at worker[1] is greater than the minimum level which is 35 and we start our iteration in 2D matrix too matrix[index][0] = difficulty and index will keep updating till we reach 82 or more .
index=0 , maxprofit=17   17>0
index=1 , maxprofit=81   81>17
index=2 , maxprofit=81   1<81
index=3 , maxprofit=81   67<81
index=4 , maxprofit=81   3<81
now as the index will go beyond limits of the 2D array so terminate and maxprofit = 81 for ability at worker[1]
3)The 84 at worker[2] is processed and as the index>4 now so loop doesn't run to determine and eventually maxprofit will remain same because if looping through the whole matrix gives 81 as maxprofit till 82 worker[1] then for sure at 84 worker[2] the maxprofit will be >= to the previousmaxprofit=81 
net maxprofit = 81 + 81 =162
4) The 3) repeats for the worker[3],worker[4],worker[5] and eventual net profit is =>162+81+81+81 = 324

Approach :
1)Inputs:

difficulty[]: Array where difficulty[i] represents the difficulty of the i-th job.
profit[]: Array where profit[i] represents the profit of the i-th job.
worker[]: Array where worker[j] represents the maximum difficulty that the j-th worker can handle.

2)Output:

The total maximum profit obtained by optimally assigning workers to the jobs they can handle.
The goal is to assign each worker to the highest-paying job they can handle, thereby maximizing the total profit.

3)Pair Jobs with Profit:

Create a list of jobs where each job is a pair of difficulty and profit: jobs[i] = [difficulty[i], profit[i]].
Sort Jobs by Difficulty:
Sort the jobs array by difficulty in ascending order to facilitate the assignment process.
Sort Workers by Capability:
Sort the worker array to match workers to the jobs they can perform in an efficient manner.

4)Maximize Profit for Each Worker:

Iterate over each worker and assign them to the best job they can handle based on the sorted job list.
Maintain a running maximum profit (maxProfit) to keep track of the highest profit available for the jobs the worker can do.
Add the maxProfit to the totalProfit for each worker.

5)Return Total Profit:
Sum up the maximum profit each worker can earn and return this as the result.
 
Code :
import java.util.Arrays;

class Solution {
    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {
        int n = difficulty.length;
        int m = worker.length;

        
        int[][] jobs = new int[n][2];
        for (int i = 0; i < n; i++) {
            jobs[i][0] = difficulty[i];
            jobs[i][1] = profit[i];
        }
        Arrays.sort(jobs, (a, b) -> Integer.compare(a[0], b[0]));
        
        Arrays.sort(worker);

        int totalProfit = 0;
        int maxProfit = 0;
        int jobIndex = 0;

        
        for (int i = 0; i < m; i++) {
            while (jobIndex < n && worker[i] >= jobs[jobIndex][0]) {
                maxProfit = Math.max(maxProfit, jobs[jobIndex][1]);
                jobIndex++;
            }
            totalProfit += maxProfit;
            
        }
        
        return totalProfit;
    }
}

Time Complexity: O(nlogn+mlogm) due to sorting.
Space Complexity:  O(n) for the jobs array. 
